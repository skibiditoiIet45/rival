-- Settings
local _0x1 = 0.165
local _0x2 = "HumanoidRootPart"

-- Services
local _0x3 = game:GetService("Players")
local _0x4 = game:GetService("RunService")
local _0x5 = workspace.CurrentCamera
local _0x6 = _0x3.LocalPlayer
local _0x7 = _0x6:GetMouse()

-- Get closest to mouse
local function _0x8()
    local _0x9, _0xA = nil, math.huge
    for _, _0xB in pairs(_0x3:GetPlayers()) do
        if _0xB ~= _0x6 and _0xB.Character and _0xB.Character:FindFirstChild(_0x2) then
            local _0xC = _0xB.Character[_0x2]
            local _0xD, _0xE = _0x5:WorldToViewportPoint(_0xC.Position + _0xC.Velocity * _0x1)
            if _0xE then
                local _0xF = (Vector2.new(_0x7.X, _0x7.Y) - Vector2.new(_0xD.X, _0xD.Y)).Magnitude
                if _0xF < _0xA then
                    _0x9 = _0xC
                    _0xA = _0xF
                end
            end
        end
    end
    return _0x9
end

-- Hook mouse target
local _0x10
_0x10 = hookmetamethod(game, "__index", newcclosure(function(_0x11, _0x12)
    if _0x11 == _0x7 and (_0x12 == "Target" or _0x12 == "Hit") then
        local _0x13 = _0x8()
        if _0x13 then
            if _0x12 == "Target" then
                return _0x13
            elseif _0x12 == "Hit" then
                return CFrame.new(_0x13.Position + (_0x13.Velocity * _0x1))
            end
        end
    end
    return _0x10(_0x11, _0x12)
end))